// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_controller_description.proto

#include "robot_controller_description.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_robot_5fcontroller_5fdescription_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AddInIndicators;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Arm;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cartesian;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionIndicators;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RAPIDModule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotIndicators;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotWareVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StandardizedJoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Transmission;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MechanicalUnitGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RAPIDTask;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Joint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Robot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Single;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MechanicalUnit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fcontroller_5fdescription_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SystemIndicators;
}  // namespace protobuf_robot_5fcontroller_5fdescription_2eproto
namespace abb {
namespace robot {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class RobotControllerDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotControllerDescription>
      _instance;
} _RobotControllerDescription_default_instance_;
class RobotWareVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotWareVersion>
      _instance;
} _RobotWareVersion_default_instance_;
class CartesianDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cartesian>
      _instance;
} _Cartesian_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion>
      _instance;
} _Quaternion_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class RobotIndicatorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotIndicators>
      _instance;
} _RobotIndicators_default_instance_;
class OptionIndicatorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionIndicators>
      _instance;
} _OptionIndicators_default_instance_;
class AddInIndicatorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddInIndicators>
      _instance;
} _AddInIndicators_default_instance_;
class SystemIndicatorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemIndicators>
      _instance;
} _SystemIndicators_default_instance_;
class TransmissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transmission>
      _instance;
} _Transmission_default_instance_;
class ArmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Arm>
      _instance;
} _Arm_default_instance_;
class JointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Joint>
      _instance;
} _Joint_default_instance_;
class StandardizedJointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StandardizedJoint>
      _instance;
} _StandardizedJoint_default_instance_;
class SingleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Single>
      _instance;
} _Single_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Robot>
      _instance;
} _Robot_default_instance_;
class MechanicalUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MechanicalUnit>
      _instance;
} _MechanicalUnit_default_instance_;
class MechanicalUnitGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MechanicalUnitGroup>
      _instance;
} _MechanicalUnitGroup_default_instance_;
class RAPIDModuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RAPIDModule>
      _instance;
} _RAPIDModule_default_instance_;
class RAPIDTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RAPIDTask>
      _instance;
} _RAPIDTask_default_instance_;
}  // namespace robot
}  // namespace abb
namespace protobuf_robot_5fcontroller_5fdescription_2eproto {
static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Header_default_instance_;
    new (ptr) ::abb::robot::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotWareVersion.base,}};

static void InitDefaultsRobotControllerDescription() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_RobotControllerDescription_default_instance_;
    new (ptr) ::abb::robot::RobotControllerDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::RobotControllerDescription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RobotControllerDescription =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRobotControllerDescription}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Header.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_SystemIndicators.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_MechanicalUnitGroup.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RAPIDTask.base,}};

static void InitDefaultsRobotWareVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_RobotWareVersion_default_instance_;
    new (ptr) ::abb::robot::RobotWareVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::RobotWareVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotWareVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotWareVersion}, {}};

static void InitDefaultsCartesian() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Cartesian_default_instance_;
    new (ptr) ::abb::robot::Cartesian();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Cartesian::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Cartesian =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCartesian}, {}};

static void InitDefaultsQuaternion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Quaternion_default_instance_;
    new (ptr) ::abb::robot::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuaternion}, {}};

static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Pose_default_instance_;
    new (ptr) ::abb::robot::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPose}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Cartesian.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Quaternion.base,}};

static void InitDefaultsRobotIndicators() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_RobotIndicators_default_instance_;
    new (ptr) ::abb::robot::RobotIndicators();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::RobotIndicators::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotIndicators =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotIndicators}, {}};

static void InitDefaultsOptionIndicators() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_OptionIndicators_default_instance_;
    new (ptr) ::abb::robot::OptionIndicators();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::OptionIndicators::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionIndicators =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionIndicators}, {}};

static void InitDefaultsAddInIndicators() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_AddInIndicators_default_instance_;
    new (ptr) ::abb::robot::AddInIndicators();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::AddInIndicators::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddInIndicators =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddInIndicators}, {}};

static void InitDefaultsSystemIndicators() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_SystemIndicators_default_instance_;
    new (ptr) ::abb::robot::SystemIndicators();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::SystemIndicators::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SystemIndicators =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSystemIndicators}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotIndicators.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_OptionIndicators.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_AddInIndicators.base,}};

static void InitDefaultsTransmission() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Transmission_default_instance_;
    new (ptr) ::abb::robot::Transmission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Transmission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Transmission =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransmission}, {}};

static void InitDefaultsArm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Arm_default_instance_;
    new (ptr) ::abb::robot::Arm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Arm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Arm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArm}, {}};

static void InitDefaultsJoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Joint_default_instance_;
    new (ptr) ::abb::robot::Joint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Joint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Joint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsJoint}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Arm.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Transmission.base,}};

static void InitDefaultsStandardizedJoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_StandardizedJoint_default_instance_;
    new (ptr) ::abb::robot::StandardizedJoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::StandardizedJoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StandardizedJoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStandardizedJoint}, {}};

static void InitDefaultsSingle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Single_default_instance_;
    new (ptr) ::abb::robot::Single();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Single::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Single =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSingle}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Joint.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Pose.base,}};

static void InitDefaultsRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_Robot_default_instance_;
    new (ptr) ::abb::robot::Robot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::Robot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Robot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobot}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Joint.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Pose.base,}};

static void InitDefaultsMechanicalUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_MechanicalUnit_default_instance_;
    new (ptr) ::abb::robot::MechanicalUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::MechanicalUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MechanicalUnit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMechanicalUnit}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Robot.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Single.base,
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_StandardizedJoint.base,}};

static void InitDefaultsMechanicalUnitGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_MechanicalUnitGroup_default_instance_;
    new (ptr) ::abb::robot::MechanicalUnitGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::MechanicalUnitGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MechanicalUnitGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMechanicalUnitGroup}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_MechanicalUnit.base,}};

static void InitDefaultsRAPIDModule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_RAPIDModule_default_instance_;
    new (ptr) ::abb::robot::RAPIDModule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::RAPIDModule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RAPIDModule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRAPIDModule}, {}};

static void InitDefaultsRAPIDTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::abb::robot::_RAPIDTask_default_instance_;
    new (ptr) ::abb::robot::RAPIDTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abb::robot::RAPIDTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RAPIDTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRAPIDTask}, {
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RAPIDModule.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotControllerDescription.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotWareVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cartesian.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Quaternion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotIndicators.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionIndicators.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddInIndicators.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemIndicators.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transmission.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Arm.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Joint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StandardizedJoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Single.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Robot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MechanicalUnit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MechanicalUnitGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RAPIDModule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RAPIDTask.base);
}

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, rws_port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, robot_ware_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, system_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, system_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Header, options_),
  0,
  4,
  3,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotControllerDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotControllerDescription, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotControllerDescription, system_indicators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotControllerDescription, mechanical_units_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotControllerDescription, rapid_tasks_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotWareVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotWareVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotWareVersion, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotWareVersion, major_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotWareVersion, minor_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotWareVersion, patch_number_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Cartesian, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Cartesian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Cartesian, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Cartesian, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Cartesian, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Quaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Quaternion, q1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Quaternion, q2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Quaternion, q3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Quaternion, q4_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Pose, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Pose, rotation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotIndicators, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotIndicators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RobotIndicators, irb14000_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::OptionIndicators, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::OptionIndicators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::OptionIndicators, egm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::OptionIndicators, leadthrough_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::OptionIndicators, multimove_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::AddInIndicators, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::AddInIndicators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::AddInIndicators, smart_gripper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::AddInIndicators, state_machine_1_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::AddInIndicators, state_machine_1_1_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::SystemIndicators, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::SystemIndicators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::SystemIndicators, robots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::SystemIndicators, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::SystemIndicators, addins_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Transmission, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Transmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Transmission, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Transmission, rotating_move_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Arm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Arm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Arm, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Arm, lower_joint_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Arm, upper_joint_bound_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, logical_axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, kinematic_axis_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, arm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Joint, transmission_),
  0,
  3,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, original_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, standardized_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, rotating_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, lower_joint_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::StandardizedJoint, upper_joint_bound_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, joint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, base_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Single, base_frame_moved_by_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, joints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, base_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::Robot, base_frame_moved_by_),
  0,
  1,
  ~0u,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, singles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, task_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, axes_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, is_integrated_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, has_integrated_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnit, standardized_joints_),
  0,
  5,
  ~0u,
  6,
  1,
  7,
  8,
  2,
  3,
  4,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::MechanicalUnitGroup, mechanical_units_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDModule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDModule, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDModule, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, is_motion_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, is_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, execution_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abb::robot::RAPIDTask, modules_),
  0,
  1,
  2,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::abb::robot::Header)},
  { 17, 26, sizeof(::abb::robot::RobotControllerDescription)},
  { 30, 39, sizeof(::abb::robot::RobotWareVersion)},
  { 43, 51, sizeof(::abb::robot::Cartesian)},
  { 54, 63, sizeof(::abb::robot::Quaternion)},
  { 67, 74, sizeof(::abb::robot::Pose)},
  { 76, 82, sizeof(::abb::robot::RobotIndicators)},
  { 83, 91, sizeof(::abb::robot::OptionIndicators)},
  { 94, 102, sizeof(::abb::robot::AddInIndicators)},
  { 105, 113, sizeof(::abb::robot::SystemIndicators)},
  { 116, 123, sizeof(::abb::robot::Transmission)},
  { 125, 133, sizeof(::abb::robot::Arm)},
  { 136, 146, sizeof(::abb::robot::Joint)},
  { 151, 161, sizeof(::abb::robot::StandardizedJoint)},
  { 166, 176, sizeof(::abb::robot::Single)},
  { 181, 191, sizeof(::abb::robot::Robot)},
  { 196, 213, sizeof(::abb::robot::MechanicalUnit)},
  { 225, 233, sizeof(::abb::robot::MechanicalUnitGroup)},
  { 236, 243, sizeof(::abb::robot::RAPIDModule)},
  { 245, 255, sizeof(::abb::robot::RAPIDTask)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_RobotControllerDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_RobotWareVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Cartesian_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_RobotIndicators_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_OptionIndicators_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_AddInIndicators_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_SystemIndicators_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Transmission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Arm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Joint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_StandardizedJoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Single_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_Robot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_MechanicalUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_MechanicalUnitGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_RAPIDModule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abb::robot::_RAPIDTask_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "robot_controller_description.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"robot_controller_description.proto\022\tab"
      "b.robot\"\251\001\n\006Header\022\022\n\nip_address\030\001 \001(\t\022\027"
      "\n\017rws_port_number\030\002 \001(\r\0227\n\022robot_ware_ve"
      "rsion\030\003 \001(\0132\033.abb.robot.RobotWareVersion"
      "\022\023\n\013system_name\030\004 \001(\t\022\023\n\013system_type\030\005 \001"
      "(\t\022\017\n\007options\030\006 \003(\t\"\343\001\n\032RobotControllerD"
      "escription\022!\n\006header\030\001 \001(\0132\021.abb.robot.H"
      "eader\0226\n\021system_indicators\030\002 \001(\0132\033.abb.r"
      "obot.SystemIndicators\022\?\n\027mechanical_unit"
      "s_groups\030\003 \003(\0132\036.abb.robot.MechanicalUni"
      "tGroup\022)\n\013rapid_tasks\030\004 \003(\0132\024.abb.robot."
      "RAPIDTask\"b\n\020RobotWareVersion\022\014\n\004name\030\001 "
      "\001(\t\022\024\n\014major_number\030\002 \001(\r\022\024\n\014minor_numbe"
      "r\030\003 \001(\r\022\024\n\014patch_number\030\004 \001(\r\",\n\tCartesi"
      "an\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"<\n\nQ"
      "uaternion\022\n\n\002q1\030\001 \001(\001\022\n\n\002q2\030\002 \001(\001\022\n\n\002q3\030"
      "\003 \001(\001\022\n\n\002q4\030\004 \001(\001\"W\n\004Pose\022&\n\010position\030\001 "
      "\001(\0132\024.abb.robot.Cartesian\022\'\n\010rotation\030\002 "
      "\001(\0132\025.abb.robot.Quaternion\"#\n\017RobotIndic"
      "ators\022\020\n\010irb14000\030\001 \001(\010\"G\n\020OptionIndicat"
      "ors\022\013\n\003egm\030\001 \001(\010\022\023\n\013leadthrough\030\002 \001(\010\022\021\n"
      "\tmultimove\030\003 \001(\010\"^\n\017AddInIndicators\022\025\n\rs"
      "mart_gripper\030\001 \001(\010\022\031\n\021state_machine_1_0\030"
      "\002 \001(\010\022\031\n\021state_machine_1_1\030\003 \001(\010\"\230\001\n\020Sys"
      "temIndicators\022*\n\006robots\030\001 \001(\0132\032.abb.robo"
      "t.RobotIndicators\022,\n\007options\030\002 \001(\0132\033.abb"
      ".robot.OptionIndicators\022*\n\006addins\030\003 \001(\0132"
      "\032.abb.robot.AddInIndicators\"3\n\014Transmiss"
      "ion\022\014\n\004name\030\001 \001(\t\022\025\n\rrotating_move\030\002 \001(\010"
      "\"I\n\003Arm\022\014\n\004name\030\001 \001(\t\022\031\n\021lower_joint_bou"
      "nd\030\002 \001(\001\022\031\n\021upper_joint_bound\030\003 \001(\001\"\226\001\n\005"
      "Joint\022\014\n\004name\030\001 \001(\t\022\024\n\014logical_axis\030\002 \001("
      "\005\022\035\n\025kinematic_axis_number\030\003 \001(\005\022\033\n\003arm\030"
      "\004 \001(\0132\016.abb.robot.Arm\022-\n\014transmission\030\005 "
      "\001(\0132\027.abb.robot.Transmission\"\222\001\n\021Standar"
      "dizedJoint\022\025\n\roriginal_name\030\001 \001(\t\022\031\n\021sta"
      "ndardized_name\030\002 \001(\t\022\025\n\rrotating_move\030\003 "
      "\001(\010\022\031\n\021lower_joint_bound\030\004 \001(\001\022\031\n\021upper_"
      "joint_bound\030\005 \001(\001\"\207\001\n\006Single\022\014\n\004name\030\001 \001"
      "(\t\022\014\n\004type\030\002 \001(\t\022\037\n\005joint\030\003 \001(\0132\020.abb.ro"
      "bot.Joint\022#\n\nbase_frame\030\004 \001(\0132\017.abb.robo"
      "t.Pose\022\033\n\023base_frame_moved_by\030\005 \001(\t\"\207\001\n\005"
      "Robot\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022 \n\006joi"
      "nts\030\003 \003(\0132\020.abb.robot.Joint\022#\n\nbase_fram"
      "e\030\004 \001(\0132\017.abb.robot.Pose\022\033\n\023base_frame_m"
      "oved_by\030\005 \001(\t\"\377\003\n\016MechanicalUnit\022\014\n\004name"
      "\030\001 \001(\t\022\037\n\005robot\030\002 \001(\0132\020.abb.robot.Robot\022"
      "\"\n\007singles\030\003 \003(\0132\021.abb.robot.Single\0227\n\004t"
      "ype\030\004 \001(\0162\036.abb.robot.MechanicalUnit.Typ"
      "e:\tUNDEFINED\022\021\n\ttask_name\030\005 \001(\t\022\014\n\004axes\030"
      "\006 \001(\005\022\022\n\naxes_total\030\007 \001(\005\022\032\n\022is_integrat"
      "ed_unit\030\010 \001(\t\022\033\n\023has_integrated_unit\030\t \001"
      "(\t\022\016\n\006status\030\n \001(\t\0229\n\004mode\030\013 \001(\0162\036.abb.r"
      "obot.MechanicalUnit.Mode:\013DEACTIVATED\0229\n"
      "\023standardized_joints\030\014 \003(\0132\034.abb.robot.S"
      "tandardizedJoint\"E\n\004Type\022\r\n\tUNDEFINED\020\000\022"
      "\010\n\004NONE\020\001\022\r\n\tTCP_ROBOT\020\002\022\t\n\005ROBOT\020\003\022\n\n\006S"
      "INGLE\020\004\"&\n\004Mode\022\017\n\013DEACTIVATED\020\000\022\r\n\tACTI"
      "VATED\020\001\"\202\001\n\023MechanicalUnitGroup\022\014\n\004name\030"
      "\001 \001(\t\022(\n\005robot\030\002 \001(\0132\031.abb.robot.Mechani"
      "calUnit\0223\n\020mechanical_units\030\003 \003(\0132\031.abb."
      "robot.MechanicalUnit\")\n\013RAPIDModule\022\014\n\004n"
      "ame\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\"\213\002\n\tRAPIDTask\022\014\n"
      "\004name\030\001 \001(\t\022\026\n\016is_motion_task\030\002 \001(\010\022\021\n\ti"
      "s_active\030\003 \001(\010\022E\n\017execution_state\030\004 \001(\0162"
      "#.abb.robot.RAPIDTask.ExecutionState:\007UN"
      "KNOWN\022\'\n\007modules\030\005 \003(\0132\026.abb.robot.RAPID"
      "Module\"U\n\016ExecutionState\022\013\n\007UNKNOWN\020\001\022\t\n"
      "\005READY\020\002\022\013\n\007STOPPED\020\003\022\013\n\007STARTED\020\004\022\021\n\rUN"
      "INITIALIZED\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2773);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_controller_description.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robot_5fcontroller_5fdescription_2eproto
namespace abb {
namespace robot {
const ::google::protobuf::EnumDescriptor* MechanicalUnit_Type_descriptor() {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_enum_descriptors[0];
}
bool MechanicalUnit_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MechanicalUnit_Type MechanicalUnit::UNDEFINED;
const MechanicalUnit_Type MechanicalUnit::NONE;
const MechanicalUnit_Type MechanicalUnit::TCP_ROBOT;
const MechanicalUnit_Type MechanicalUnit::ROBOT;
const MechanicalUnit_Type MechanicalUnit::SINGLE;
const MechanicalUnit_Type MechanicalUnit::Type_MIN;
const MechanicalUnit_Type MechanicalUnit::Type_MAX;
const int MechanicalUnit::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MechanicalUnit_Mode_descriptor() {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_enum_descriptors[1];
}
bool MechanicalUnit_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MechanicalUnit_Mode MechanicalUnit::DEACTIVATED;
const MechanicalUnit_Mode MechanicalUnit::ACTIVATED;
const MechanicalUnit_Mode MechanicalUnit::Mode_MIN;
const MechanicalUnit_Mode MechanicalUnit::Mode_MAX;
const int MechanicalUnit::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RAPIDTask_ExecutionState_descriptor() {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_enum_descriptors[2];
}
bool RAPIDTask_ExecutionState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RAPIDTask_ExecutionState RAPIDTask::UNKNOWN;
const RAPIDTask_ExecutionState RAPIDTask::READY;
const RAPIDTask_ExecutionState RAPIDTask::STOPPED;
const RAPIDTask_ExecutionState RAPIDTask::STARTED;
const RAPIDTask_ExecutionState RAPIDTask::UNINITIALIZED;
const RAPIDTask_ExecutionState RAPIDTask::ExecutionState_MIN;
const RAPIDTask_ExecutionState RAPIDTask::ExecutionState_MAX;
const int RAPIDTask::ExecutionState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Header::InitAsDefaultInstance() {
  ::abb::robot::_Header_default_instance_._instance.get_mutable()->robot_ware_version_ = const_cast< ::abb::robot::RobotWareVersion*>(
      ::abb::robot::RobotWareVersion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kIpAddressFieldNumber;
const int Header::kRwsPortNumberFieldNumber;
const int Header::kRobotWareVersionFieldNumber;
const int Header::kSystemNameFieldNumber;
const int Header::kSystemTypeFieldNumber;
const int Header::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      options_(from.options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_address()) {
    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_name()) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  system_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_type()) {
    system_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_type_);
  }
  if (from.has_robot_ware_version()) {
    robot_ware_version_ = new ::abb::robot::RobotWareVersion(*from.robot_ware_version_);
  } else {
    robot_ware_version_ = NULL;
  }
  rws_port_number_ = from.rws_port_number_;
  // @@protoc_insertion_point(copy_constructor:abb.robot.Header)
}

void Header::SharedCtor() {
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&robot_ware_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rws_port_number_) -
      reinterpret_cast<char*>(&robot_ware_version_)) + sizeof(rws_port_number_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:abb.robot.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete robot_ware_version_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ip_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      system_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      system_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(robot_ware_version_ != NULL);
      robot_ware_version_->Clear();
    }
  }
  rws_port_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_address().data(), static_cast<int>(this->ip_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Header.ip_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rws_port_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rws_port_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rws_port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_ware_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Header.system_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_type().data(), static_cast<int>(this->system_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Header.system_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options(this->options_size() - 1).data(),
            static_cast<int>(this->options(this->options_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Header.options");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_address().data(), static_cast<int>(this->ip_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_address(), output);
  }

  // optional uint32 rws_port_number = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rws_port_number(), output);
  }

  // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_robot_ware_version(), output);
  }

  // optional string system_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->system_name(), output);
  }

  // optional string system_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_type().data(), static_cast<int>(this->system_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.system_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->system_type(), output);
  }

  // repeated string options = 6;
  for (int i = 0, n = this->options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options(i).data(), static_cast<int>(this->options(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.options");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->options(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_address().data(), static_cast<int>(this->ip_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_address(), target);
  }

  // optional uint32 rws_port_number = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rws_port_number(), target);
  }

  // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_robot_ware_version(), deterministic, target);
  }

  // optional string system_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.system_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->system_name(), target);
  }

  // optional string system_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_type().data(), static_cast<int>(this->system_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.system_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->system_type(), target);
  }

  // repeated string options = 6;
  for (int i = 0, n = this->options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options(i).data(), static_cast<int>(this->options(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Header.options");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->options(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string options = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->options_size());
  for (int i = 0, n = this->options_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ip_address = 1;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_address());
    }

    // optional string system_name = 4;
    if (has_system_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_name());
    }

    // optional string system_type = 5;
    if (has_system_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_type());
    }

    // optional .abb.robot.RobotWareVersion robot_ware_version = 3;
    if (has_robot_ware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_ware_version_);
    }

    // optional uint32 rws_port_number = 2;
    if (has_rws_port_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rws_port_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip_address();
      ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_system_name();
      system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_system_type();
      system_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_robot_ware_version()->::abb::robot::RobotWareVersion::MergeFrom(from.robot_ware_version());
    }
    if (cached_has_bits & 0x00000010u) {
      rws_port_number_ = from.rws_port_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  options_.InternalSwap(CastToBase(&other->options_));
  ip_address_.Swap(&other->ip_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_name_.Swap(&other->system_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_type_.Swap(&other->system_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(robot_ware_version_, other->robot_ware_version_);
  swap(rws_port_number_, other->rws_port_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotControllerDescription::InitAsDefaultInstance() {
  ::abb::robot::_RobotControllerDescription_default_instance_._instance.get_mutable()->header_ = const_cast< ::abb::robot::Header*>(
      ::abb::robot::Header::internal_default_instance());
  ::abb::robot::_RobotControllerDescription_default_instance_._instance.get_mutable()->system_indicators_ = const_cast< ::abb::robot::SystemIndicators*>(
      ::abb::robot::SystemIndicators::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotControllerDescription::kHeaderFieldNumber;
const int RobotControllerDescription::kSystemIndicatorsFieldNumber;
const int RobotControllerDescription::kMechanicalUnitsGroupsFieldNumber;
const int RobotControllerDescription::kRapidTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotControllerDescription::RobotControllerDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotControllerDescription.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.RobotControllerDescription)
}
RobotControllerDescription::RobotControllerDescription(const RobotControllerDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mechanical_units_groups_(from.mechanical_units_groups_),
      rapid_tasks_(from.rapid_tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::abb::robot::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_system_indicators()) {
    system_indicators_ = new ::abb::robot::SystemIndicators(*from.system_indicators_);
  } else {
    system_indicators_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.RobotControllerDescription)
}

void RobotControllerDescription::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_indicators_) -
      reinterpret_cast<char*>(&header_)) + sizeof(system_indicators_));
}

RobotControllerDescription::~RobotControllerDescription() {
  // @@protoc_insertion_point(destructor:abb.robot.RobotControllerDescription)
  SharedDtor();
}

void RobotControllerDescription::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete system_indicators_;
}

void RobotControllerDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotControllerDescription::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotControllerDescription& RobotControllerDescription::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotControllerDescription.base);
  return *internal_default_instance();
}


void RobotControllerDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RobotControllerDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mechanical_units_groups_.Clear();
  rapid_tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(system_indicators_ != NULL);
      system_indicators_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotControllerDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.RobotControllerDescription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.robot.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.SystemIndicators system_indicators = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system_indicators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mechanical_units_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rapid_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.RobotControllerDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.RobotControllerDescription)
  return false;
#undef DO_
}

void RobotControllerDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.RobotControllerDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.robot.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .abb.robot.SystemIndicators system_indicators = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_system_indicators(), output);
  }

  // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mechanical_units_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->mechanical_units_groups(static_cast<int>(i)),
      output);
  }

  // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rapid_tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->rapid_tasks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.RobotControllerDescription)
}

::google::protobuf::uint8* RobotControllerDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RobotControllerDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.robot.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .abb.robot.SystemIndicators system_indicators = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_system_indicators(), deterministic, target);
  }

  // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mechanical_units_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->mechanical_units_groups(static_cast<int>(i)), deterministic, target);
  }

  // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rapid_tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->rapid_tasks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RobotControllerDescription)
  return target;
}

size_t RobotControllerDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RobotControllerDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .abb.robot.MechanicalUnitGroup mechanical_units_groups = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mechanical_units_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mechanical_units_groups(static_cast<int>(i)));
    }
  }

  // repeated .abb.robot.RAPIDTask rapid_tasks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rapid_tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rapid_tasks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .abb.robot.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .abb.robot.SystemIndicators system_indicators = 2;
    if (has_system_indicators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *system_indicators_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotControllerDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.RobotControllerDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotControllerDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotControllerDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.RobotControllerDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.RobotControllerDescription)
    MergeFrom(*source);
  }
}

void RobotControllerDescription::MergeFrom(const RobotControllerDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RobotControllerDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mechanical_units_groups_.MergeFrom(from.mechanical_units_groups_);
  rapid_tasks_.MergeFrom(from.rapid_tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::abb::robot::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_system_indicators()->::abb::robot::SystemIndicators::MergeFrom(from.system_indicators());
    }
  }
}

void RobotControllerDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.RobotControllerDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotControllerDescription::CopyFrom(const RobotControllerDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RobotControllerDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotControllerDescription::IsInitialized() const {
  return true;
}

void RobotControllerDescription::Swap(RobotControllerDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotControllerDescription::InternalSwap(RobotControllerDescription* other) {
  using std::swap;
  CastToBase(&mechanical_units_groups_)->InternalSwap(CastToBase(&other->mechanical_units_groups_));
  CastToBase(&rapid_tasks_)->InternalSwap(CastToBase(&other->rapid_tasks_));
  swap(header_, other->header_);
  swap(system_indicators_, other->system_indicators_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotControllerDescription::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotWareVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotWareVersion::kNameFieldNumber;
const int RobotWareVersion::kMajorNumberFieldNumber;
const int RobotWareVersion::kMinorNumberFieldNumber;
const int RobotWareVersion::kPatchNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotWareVersion::RobotWareVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotWareVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.RobotWareVersion)
}
RobotWareVersion::RobotWareVersion(const RobotWareVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&major_number_, &from.major_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_number_) -
    reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.RobotWareVersion)
}

void RobotWareVersion::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_number_) -
      reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
}

RobotWareVersion::~RobotWareVersion() {
  // @@protoc_insertion_point(destructor:abb.robot.RobotWareVersion)
  SharedDtor();
}

void RobotWareVersion::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RobotWareVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotWareVersion::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotWareVersion& RobotWareVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotWareVersion.base);
  return *internal_default_instance();
}


void RobotWareVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RobotWareVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&major_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patch_number_) -
        reinterpret_cast<char*>(&major_number_)) + sizeof(patch_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotWareVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.RobotWareVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.RobotWareVersion.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 major_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_major_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_minor_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 patch_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_patch_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.RobotWareVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.RobotWareVersion)
  return false;
#undef DO_
}

void RobotWareVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.RobotWareVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RobotWareVersion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 major_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->major_number(), output);
  }

  // optional uint32 minor_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minor_number(), output);
  }

  // optional uint32 patch_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->patch_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.RobotWareVersion)
}

::google::protobuf::uint8* RobotWareVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RobotWareVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RobotWareVersion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 major_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->major_number(), target);
  }

  // optional uint32 minor_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minor_number(), target);
  }

  // optional uint32 patch_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->patch_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RobotWareVersion)
  return target;
}

size_t RobotWareVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RobotWareVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 major_number = 2;
    if (has_major_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major_number());
    }

    // optional uint32 minor_number = 3;
    if (has_minor_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_number());
    }

    // optional uint32 patch_number = 4;
    if (has_patch_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patch_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotWareVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.RobotWareVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotWareVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotWareVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.RobotWareVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.RobotWareVersion)
    MergeFrom(*source);
  }
}

void RobotWareVersion::MergeFrom(const RobotWareVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RobotWareVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      major_number_ = from.major_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      minor_number_ = from.minor_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      patch_number_ = from.patch_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotWareVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.RobotWareVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotWareVersion::CopyFrom(const RobotWareVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RobotWareVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotWareVersion::IsInitialized() const {
  return true;
}

void RobotWareVersion::Swap(RobotWareVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotWareVersion::InternalSwap(RobotWareVersion* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_number_, other->major_number_);
  swap(minor_number_, other->minor_number_);
  swap(patch_number_, other->patch_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotWareVersion::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Cartesian::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cartesian::kXFieldNumber;
const int Cartesian::kYFieldNumber;
const int Cartesian::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cartesian::Cartesian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Cartesian.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Cartesian)
}
Cartesian::Cartesian(const Cartesian& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.Cartesian)
}

void Cartesian::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Cartesian::~Cartesian() {
  // @@protoc_insertion_point(destructor:abb.robot.Cartesian)
  SharedDtor();
}

void Cartesian::SharedDtor() {
}

void Cartesian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cartesian::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cartesian& Cartesian::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Cartesian.base);
  return *internal_default_instance();
}


void Cartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Cartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cartesian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Cartesian)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Cartesian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Cartesian)
  return false;
#undef DO_
}

void Cartesian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Cartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Cartesian)
}

::google::protobuf::uint8* Cartesian::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Cartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Cartesian)
  return target;
}

size_t Cartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Cartesian)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cartesian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Cartesian)
  GOOGLE_DCHECK_NE(&from, this);
  const Cartesian* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cartesian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Cartesian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Cartesian)
    MergeFrom(*source);
  }
}

void Cartesian::MergeFrom(const Cartesian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Cartesian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cartesian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Cartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cartesian::CopyFrom(const Cartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Cartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cartesian::IsInitialized() const {
  return true;
}

void Cartesian::Swap(Cartesian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cartesian::InternalSwap(Cartesian* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cartesian::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kQ1FieldNumber;
const int Quaternion::kQ2FieldNumber;
const int Quaternion::kQ3FieldNumber;
const int Quaternion::kQ4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Quaternion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&q1_, &from.q1_,
    static_cast<size_t>(reinterpret_cast<char*>(&q4_) -
    reinterpret_cast<char*>(&q1_)) + sizeof(q4_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&q1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&q4_) -
      reinterpret_cast<char*>(&q1_)) + sizeof(q4_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:abb.robot.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaternion& Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Quaternion.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&q1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&q4_) -
        reinterpret_cast<char*>(&q1_)) + sizeof(q4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double q1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_q1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_q2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_q3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double q4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_q4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double q1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->q1(), output);
  }

  // optional double q2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->q2(), output);
  }

  // optional double q3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->q3(), output);
  }

  // optional double q4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->q4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double q1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->q1(), target);
  }

  // optional double q2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->q2(), target);
  }

  // optional double q3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->q3(), target);
  }

  // optional double q4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->q4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double q1 = 1;
    if (has_q1()) {
      total_size += 1 + 8;
    }

    // optional double q2 = 2;
    if (has_q2()) {
      total_size += 1 + 8;
    }

    // optional double q3 = 3;
    if (has_q3()) {
      total_size += 1 + 8;
    }

    // optional double q4 = 4;
    if (has_q4()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      q1_ = from.q1_;
    }
    if (cached_has_bits & 0x00000002u) {
      q2_ = from.q2_;
    }
    if (cached_has_bits & 0x00000004u) {
      q3_ = from.q3_;
    }
    if (cached_has_bits & 0x00000008u) {
      q4_ = from.q4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  swap(q1_, other->q1_);
  swap(q2_, other->q2_);
  swap(q3_, other->q3_);
  swap(q4_, other->q4_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::abb::robot::_Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::abb::robot::Cartesian*>(
      ::abb::robot::Cartesian::internal_default_instance());
  ::abb::robot::_Pose_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::abb::robot::Quaternion*>(
      ::abb::robot::Quaternion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPositionFieldNumber;
const int Pose::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::abb::robot::Cartesian(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::abb::robot::Quaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.Pose)
}

void Pose::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:abb.robot.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.robot.Cartesian position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Quaternion rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.robot.Cartesian position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // optional .abb.robot.Quaternion rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_rotation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.robot.Cartesian position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // optional .abb.robot.Quaternion rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_rotation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .abb.robot.Cartesian position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .abb.robot.Quaternion rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::abb::robot::Cartesian::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::abb::robot::Quaternion::MergeFrom(from.rotation());
    }
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotIndicators::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotIndicators::kIrb14000FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotIndicators::RobotIndicators()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotIndicators.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.RobotIndicators)
}
RobotIndicators::RobotIndicators(const RobotIndicators& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  irb14000_ = from.irb14000_;
  // @@protoc_insertion_point(copy_constructor:abb.robot.RobotIndicators)
}

void RobotIndicators::SharedCtor() {
  irb14000_ = false;
}

RobotIndicators::~RobotIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.RobotIndicators)
  SharedDtor();
}

void RobotIndicators::SharedDtor() {
}

void RobotIndicators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotIndicators::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotIndicators& RobotIndicators::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RobotIndicators.base);
  return *internal_default_instance();
}


void RobotIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RobotIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  irb14000_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotIndicators::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.RobotIndicators)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool irb14000 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_irb14000();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &irb14000_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.RobotIndicators)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.RobotIndicators)
  return false;
#undef DO_
}

void RobotIndicators::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.RobotIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool irb14000 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->irb14000(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.RobotIndicators)
}

::google::protobuf::uint8* RobotIndicators::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RobotIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool irb14000 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->irb14000(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RobotIndicators)
  return target;
}

size_t RobotIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RobotIndicators)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool irb14000 = 1;
  if (has_irb14000()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotIndicators::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.RobotIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotIndicators* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotIndicators>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.RobotIndicators)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.RobotIndicators)
    MergeFrom(*source);
  }
}

void RobotIndicators::MergeFrom(const RobotIndicators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RobotIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_irb14000()) {
    set_irb14000(from.irb14000());
  }
}

void RobotIndicators::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.RobotIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotIndicators::CopyFrom(const RobotIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RobotIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotIndicators::IsInitialized() const {
  return true;
}

void RobotIndicators::Swap(RobotIndicators* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotIndicators::InternalSwap(RobotIndicators* other) {
  using std::swap;
  swap(irb14000_, other->irb14000_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotIndicators::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionIndicators::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionIndicators::kEgmFieldNumber;
const int OptionIndicators::kLeadthroughFieldNumber;
const int OptionIndicators::kMultimoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionIndicators::OptionIndicators()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_OptionIndicators.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.OptionIndicators)
}
OptionIndicators::OptionIndicators(const OptionIndicators& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&egm_, &from.egm_,
    static_cast<size_t>(reinterpret_cast<char*>(&multimove_) -
    reinterpret_cast<char*>(&egm_)) + sizeof(multimove_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.OptionIndicators)
}

void OptionIndicators::SharedCtor() {
  ::memset(&egm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multimove_) -
      reinterpret_cast<char*>(&egm_)) + sizeof(multimove_));
}

OptionIndicators::~OptionIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.OptionIndicators)
  SharedDtor();
}

void OptionIndicators::SharedDtor() {
}

void OptionIndicators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionIndicators::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionIndicators& OptionIndicators::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_OptionIndicators.base);
  return *internal_default_instance();
}


void OptionIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.OptionIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&egm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multimove_) -
      reinterpret_cast<char*>(&egm_)) + sizeof(multimove_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OptionIndicators::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.OptionIndicators)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool egm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_egm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &egm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leadthrough = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_leadthrough();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leadthrough_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool multimove = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_multimove();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multimove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.OptionIndicators)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.OptionIndicators)
  return false;
#undef DO_
}

void OptionIndicators::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.OptionIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool egm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->egm(), output);
  }

  // optional bool leadthrough = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->leadthrough(), output);
  }

  // optional bool multimove = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->multimove(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.OptionIndicators)
}

::google::protobuf::uint8* OptionIndicators::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.OptionIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool egm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->egm(), target);
  }

  // optional bool leadthrough = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->leadthrough(), target);
  }

  // optional bool multimove = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->multimove(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.OptionIndicators)
  return target;
}

size_t OptionIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.OptionIndicators)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool egm = 1;
    if (has_egm()) {
      total_size += 1 + 1;
    }

    // optional bool leadthrough = 2;
    if (has_leadthrough()) {
      total_size += 1 + 1;
    }

    // optional bool multimove = 3;
    if (has_multimove()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionIndicators::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.OptionIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionIndicators* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionIndicators>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.OptionIndicators)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.OptionIndicators)
    MergeFrom(*source);
  }
}

void OptionIndicators::MergeFrom(const OptionIndicators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.OptionIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      egm_ = from.egm_;
    }
    if (cached_has_bits & 0x00000002u) {
      leadthrough_ = from.leadthrough_;
    }
    if (cached_has_bits & 0x00000004u) {
      multimove_ = from.multimove_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OptionIndicators::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.OptionIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionIndicators::CopyFrom(const OptionIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.OptionIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionIndicators::IsInitialized() const {
  return true;
}

void OptionIndicators::Swap(OptionIndicators* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionIndicators::InternalSwap(OptionIndicators* other) {
  using std::swap;
  swap(egm_, other->egm_);
  swap(leadthrough_, other->leadthrough_);
  swap(multimove_, other->multimove_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionIndicators::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddInIndicators::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddInIndicators::kSmartGripperFieldNumber;
const int AddInIndicators::kStateMachine10FieldNumber;
const int AddInIndicators::kStateMachine11FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddInIndicators::AddInIndicators()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_AddInIndicators.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.AddInIndicators)
}
AddInIndicators::AddInIndicators(const AddInIndicators& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&smart_gripper_, &from.smart_gripper_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_machine_1_1_) -
    reinterpret_cast<char*>(&smart_gripper_)) + sizeof(state_machine_1_1_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.AddInIndicators)
}

void AddInIndicators::SharedCtor() {
  ::memset(&smart_gripper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_machine_1_1_) -
      reinterpret_cast<char*>(&smart_gripper_)) + sizeof(state_machine_1_1_));
}

AddInIndicators::~AddInIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.AddInIndicators)
  SharedDtor();
}

void AddInIndicators::SharedDtor() {
}

void AddInIndicators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddInIndicators::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddInIndicators& AddInIndicators::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_AddInIndicators.base);
  return *internal_default_instance();
}


void AddInIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.AddInIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&smart_gripper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_machine_1_1_) -
      reinterpret_cast<char*>(&smart_gripper_)) + sizeof(state_machine_1_1_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddInIndicators::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.AddInIndicators)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool smart_gripper = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_smart_gripper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smart_gripper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool state_machine_1_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state_machine_1_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_machine_1_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool state_machine_1_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state_machine_1_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_machine_1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.AddInIndicators)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.AddInIndicators)
  return false;
#undef DO_
}

void AddInIndicators::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.AddInIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool smart_gripper = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->smart_gripper(), output);
  }

  // optional bool state_machine_1_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state_machine_1_0(), output);
  }

  // optional bool state_machine_1_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state_machine_1_1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.AddInIndicators)
}

::google::protobuf::uint8* AddInIndicators::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.AddInIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool smart_gripper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->smart_gripper(), target);
  }

  // optional bool state_machine_1_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state_machine_1_0(), target);
  }

  // optional bool state_machine_1_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state_machine_1_1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.AddInIndicators)
  return target;
}

size_t AddInIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.AddInIndicators)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool smart_gripper = 1;
    if (has_smart_gripper()) {
      total_size += 1 + 1;
    }

    // optional bool state_machine_1_0 = 2;
    if (has_state_machine_1_0()) {
      total_size += 1 + 1;
    }

    // optional bool state_machine_1_1 = 3;
    if (has_state_machine_1_1()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddInIndicators::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.AddInIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  const AddInIndicators* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddInIndicators>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.AddInIndicators)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.AddInIndicators)
    MergeFrom(*source);
  }
}

void AddInIndicators::MergeFrom(const AddInIndicators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.AddInIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      smart_gripper_ = from.smart_gripper_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_machine_1_0_ = from.state_machine_1_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_machine_1_1_ = from.state_machine_1_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddInIndicators::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.AddInIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddInIndicators::CopyFrom(const AddInIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.AddInIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddInIndicators::IsInitialized() const {
  return true;
}

void AddInIndicators::Swap(AddInIndicators* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddInIndicators::InternalSwap(AddInIndicators* other) {
  using std::swap;
  swap(smart_gripper_, other->smart_gripper_);
  swap(state_machine_1_0_, other->state_machine_1_0_);
  swap(state_machine_1_1_, other->state_machine_1_1_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddInIndicators::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemIndicators::InitAsDefaultInstance() {
  ::abb::robot::_SystemIndicators_default_instance_._instance.get_mutable()->robots_ = const_cast< ::abb::robot::RobotIndicators*>(
      ::abb::robot::RobotIndicators::internal_default_instance());
  ::abb::robot::_SystemIndicators_default_instance_._instance.get_mutable()->options_ = const_cast< ::abb::robot::OptionIndicators*>(
      ::abb::robot::OptionIndicators::internal_default_instance());
  ::abb::robot::_SystemIndicators_default_instance_._instance.get_mutable()->addins_ = const_cast< ::abb::robot::AddInIndicators*>(
      ::abb::robot::AddInIndicators::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemIndicators::kRobotsFieldNumber;
const int SystemIndicators::kOptionsFieldNumber;
const int SystemIndicators::kAddinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemIndicators::SystemIndicators()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_SystemIndicators.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.SystemIndicators)
}
SystemIndicators::SystemIndicators(const SystemIndicators& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_robots()) {
    robots_ = new ::abb::robot::RobotIndicators(*from.robots_);
  } else {
    robots_ = NULL;
  }
  if (from.has_options()) {
    options_ = new ::abb::robot::OptionIndicators(*from.options_);
  } else {
    options_ = NULL;
  }
  if (from.has_addins()) {
    addins_ = new ::abb::robot::AddInIndicators(*from.addins_);
  } else {
    addins_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.SystemIndicators)
}

void SystemIndicators::SharedCtor() {
  ::memset(&robots_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addins_) -
      reinterpret_cast<char*>(&robots_)) + sizeof(addins_));
}

SystemIndicators::~SystemIndicators() {
  // @@protoc_insertion_point(destructor:abb.robot.SystemIndicators)
  SharedDtor();
}

void SystemIndicators::SharedDtor() {
  if (this != internal_default_instance()) delete robots_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete addins_;
}

void SystemIndicators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemIndicators::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemIndicators& SystemIndicators::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_SystemIndicators.base);
  return *internal_default_instance();
}


void SystemIndicators::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.SystemIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robots_ != NULL);
      robots_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(addins_ != NULL);
      addins_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemIndicators::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.SystemIndicators)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.robot.RobotIndicators robots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.OptionIndicators options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.AddInIndicators addins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_addins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.SystemIndicators)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.SystemIndicators)
  return false;
#undef DO_
}

void SystemIndicators::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.SystemIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.robot.RobotIndicators robots = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_robots(), output);
  }

  // optional .abb.robot.OptionIndicators options = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_options(), output);
  }

  // optional .abb.robot.AddInIndicators addins = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_addins(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.SystemIndicators)
}

::google::protobuf::uint8* SystemIndicators::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.SystemIndicators)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .abb.robot.RobotIndicators robots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_robots(), deterministic, target);
  }

  // optional .abb.robot.OptionIndicators options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_options(), deterministic, target);
  }

  // optional .abb.robot.AddInIndicators addins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_addins(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.SystemIndicators)
  return target;
}

size_t SystemIndicators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.SystemIndicators)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .abb.robot.RobotIndicators robots = 1;
    if (has_robots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robots_);
    }

    // optional .abb.robot.OptionIndicators options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .abb.robot.AddInIndicators addins = 3;
    if (has_addins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *addins_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemIndicators::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.SystemIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemIndicators* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemIndicators>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.SystemIndicators)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.SystemIndicators)
    MergeFrom(*source);
  }
}

void SystemIndicators::MergeFrom(const SystemIndicators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.SystemIndicators)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_robots()->::abb::robot::RobotIndicators::MergeFrom(from.robots());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_options()->::abb::robot::OptionIndicators::MergeFrom(from.options());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_addins()->::abb::robot::AddInIndicators::MergeFrom(from.addins());
    }
  }
}

void SystemIndicators::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.SystemIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemIndicators::CopyFrom(const SystemIndicators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.SystemIndicators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemIndicators::IsInitialized() const {
  return true;
}

void SystemIndicators::Swap(SystemIndicators* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemIndicators::InternalSwap(SystemIndicators* other) {
  using std::swap;
  swap(robots_, other->robots_);
  swap(options_, other->options_);
  swap(addins_, other->addins_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemIndicators::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Transmission::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transmission::kNameFieldNumber;
const int Transmission::kRotatingMoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transmission::Transmission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Transmission.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Transmission)
}
Transmission::Transmission(const Transmission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  rotating_move_ = from.rotating_move_;
  // @@protoc_insertion_point(copy_constructor:abb.robot.Transmission)
}

void Transmission::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotating_move_ = false;
}

Transmission::~Transmission() {
  // @@protoc_insertion_point(destructor:abb.robot.Transmission)
  SharedDtor();
}

void Transmission::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Transmission::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transmission& Transmission::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Transmission.base);
  return *internal_default_instance();
}


void Transmission::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Transmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  rotating_move_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Transmission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Transmission.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rotating_move = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rotating_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotating_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Transmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Transmission)
  return false;
#undef DO_
}

void Transmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Transmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Transmission.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool rotating_move = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rotating_move(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Transmission)
}

::google::protobuf::uint8* Transmission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Transmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Transmission.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool rotating_move = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rotating_move(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Transmission)
  return target;
}

size_t Transmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Transmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool rotating_move = 2;
    if (has_rotating_move()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transmission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Transmission)
  GOOGLE_DCHECK_NE(&from, this);
  const Transmission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transmission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Transmission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Transmission)
    MergeFrom(*source);
  }
}

void Transmission::MergeFrom(const Transmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Transmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      rotating_move_ = from.rotating_move_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transmission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Transmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transmission::CopyFrom(const Transmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Transmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transmission::IsInitialized() const {
  return true;
}

void Transmission::Swap(Transmission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transmission::InternalSwap(Transmission* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rotating_move_, other->rotating_move_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Transmission::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Arm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Arm::kNameFieldNumber;
const int Arm::kLowerJointBoundFieldNumber;
const int Arm::kUpperJointBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Arm::Arm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Arm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Arm)
}
Arm::Arm(const Arm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lower_joint_bound_, &from.lower_joint_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_joint_bound_) -
    reinterpret_cast<char*>(&lower_joint_bound_)) + sizeof(upper_joint_bound_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.Arm)
}

void Arm::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lower_joint_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_joint_bound_) -
      reinterpret_cast<char*>(&lower_joint_bound_)) + sizeof(upper_joint_bound_));
}

Arm::~Arm() {
  // @@protoc_insertion_point(destructor:abb.robot.Arm)
  SharedDtor();
}

void Arm::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Arm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Arm::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Arm& Arm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Arm.base);
  return *internal_default_instance();
}


void Arm::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Arm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&lower_joint_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upper_joint_bound_) -
        reinterpret_cast<char*>(&lower_joint_bound_)) + sizeof(upper_joint_bound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Arm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Arm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Arm.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lower_joint_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lower_joint_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_joint_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double upper_joint_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_upper_joint_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_joint_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Arm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Arm)
  return false;
#undef DO_
}

void Arm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Arm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Arm.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double lower_joint_bound = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lower_joint_bound(), output);
  }

  // optional double upper_joint_bound = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->upper_joint_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Arm)
}

::google::protobuf::uint8* Arm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Arm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Arm.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double lower_joint_bound = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lower_joint_bound(), target);
  }

  // optional double upper_joint_bound = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->upper_joint_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Arm)
  return target;
}

size_t Arm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Arm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double lower_joint_bound = 2;
    if (has_lower_joint_bound()) {
      total_size += 1 + 8;
    }

    // optional double upper_joint_bound = 3;
    if (has_upper_joint_bound()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Arm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Arm)
  GOOGLE_DCHECK_NE(&from, this);
  const Arm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Arm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Arm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Arm)
    MergeFrom(*source);
  }
}

void Arm::MergeFrom(const Arm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Arm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      lower_joint_bound_ = from.lower_joint_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      upper_joint_bound_ = from.upper_joint_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Arm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Arm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arm::CopyFrom(const Arm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Arm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arm::IsInitialized() const {
  return true;
}

void Arm::Swap(Arm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arm::InternalSwap(Arm* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lower_joint_bound_, other->lower_joint_bound_);
  swap(upper_joint_bound_, other->upper_joint_bound_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Arm::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Joint::InitAsDefaultInstance() {
  ::abb::robot::_Joint_default_instance_._instance.get_mutable()->arm_ = const_cast< ::abb::robot::Arm*>(
      ::abb::robot::Arm::internal_default_instance());
  ::abb::robot::_Joint_default_instance_._instance.get_mutable()->transmission_ = const_cast< ::abb::robot::Transmission*>(
      ::abb::robot::Transmission::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Joint::kNameFieldNumber;
const int Joint::kLogicalAxisFieldNumber;
const int Joint::kKinematicAxisNumberFieldNumber;
const int Joint::kArmFieldNumber;
const int Joint::kTransmissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Joint::Joint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Joint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Joint)
}
Joint::Joint(const Joint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_arm()) {
    arm_ = new ::abb::robot::Arm(*from.arm_);
  } else {
    arm_ = NULL;
  }
  if (from.has_transmission()) {
    transmission_ = new ::abb::robot::Transmission(*from.transmission_);
  } else {
    transmission_ = NULL;
  }
  ::memcpy(&logical_axis_, &from.logical_axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&kinematic_axis_number_) -
    reinterpret_cast<char*>(&logical_axis_)) + sizeof(kinematic_axis_number_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.Joint)
}

void Joint::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&arm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kinematic_axis_number_) -
      reinterpret_cast<char*>(&arm_)) + sizeof(kinematic_axis_number_));
}

Joint::~Joint() {
  // @@protoc_insertion_point(destructor:abb.robot.Joint)
  SharedDtor();
}

void Joint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete arm_;
  if (this != internal_default_instance()) delete transmission_;
}

void Joint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Joint::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Joint& Joint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Joint.base);
  return *internal_default_instance();
}


void Joint::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(arm_ != NULL);
      arm_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transmission_ != NULL);
      transmission_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&logical_axis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kinematic_axis_number_) -
        reinterpret_cast<char*>(&logical_axis_)) + sizeof(kinematic_axis_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Joint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Joint.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logical_axis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_logical_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logical_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kinematic_axis_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_kinematic_axis_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kinematic_axis_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Arm arm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Transmission transmission = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transmission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Joint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Joint)
  return false;
#undef DO_
}

void Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Joint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 logical_axis = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logical_axis(), output);
  }

  // optional int32 kinematic_axis_number = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kinematic_axis_number(), output);
  }

  // optional .abb.robot.Arm arm = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_arm(), output);
  }

  // optional .abb.robot.Transmission transmission = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_transmission(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Joint)
}

::google::protobuf::uint8* Joint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Joint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Joint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 logical_axis = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logical_axis(), target);
  }

  // optional int32 kinematic_axis_number = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kinematic_axis_number(), target);
  }

  // optional .abb.robot.Arm arm = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_arm(), deterministic, target);
  }

  // optional .abb.robot.Transmission transmission = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_transmission(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Joint)
  return target;
}

size_t Joint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Joint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .abb.robot.Arm arm = 4;
    if (has_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *arm_);
    }

    // optional .abb.robot.Transmission transmission = 5;
    if (has_transmission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transmission_);
    }

    // optional int32 logical_axis = 2;
    if (has_logical_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logical_axis());
    }

    // optional int32 kinematic_axis_number = 3;
    if (has_kinematic_axis_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kinematic_axis_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  const Joint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Joint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Joint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Joint)
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Joint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_arm()->::abb::robot::Arm::MergeFrom(from.arm());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_transmission()->::abb::robot::Transmission::MergeFrom(from.transmission());
    }
    if (cached_has_bits & 0x00000008u) {
      logical_axis_ = from.logical_axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      kinematic_axis_number_ = from.kinematic_axis_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Joint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Joint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  return true;
}

void Joint::Swap(Joint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joint::InternalSwap(Joint* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(arm_, other->arm_);
  swap(transmission_, other->transmission_);
  swap(logical_axis_, other->logical_axis_);
  swap(kinematic_axis_number_, other->kinematic_axis_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StandardizedJoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StandardizedJoint::kOriginalNameFieldNumber;
const int StandardizedJoint::kStandardizedNameFieldNumber;
const int StandardizedJoint::kRotatingMoveFieldNumber;
const int StandardizedJoint::kLowerJointBoundFieldNumber;
const int StandardizedJoint::kUpperJointBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StandardizedJoint::StandardizedJoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_StandardizedJoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.StandardizedJoint)
}
StandardizedJoint::StandardizedJoint(const StandardizedJoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_name()) {
    original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
  }
  standardized_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_standardized_name()) {
    standardized_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.standardized_name_);
  }
  ::memcpy(&lower_joint_bound_, &from.lower_joint_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotating_move_) -
    reinterpret_cast<char*>(&lower_joint_bound_)) + sizeof(rotating_move_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.StandardizedJoint)
}

void StandardizedJoint::SharedCtor() {
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  standardized_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lower_joint_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotating_move_) -
      reinterpret_cast<char*>(&lower_joint_bound_)) + sizeof(rotating_move_));
}

StandardizedJoint::~StandardizedJoint() {
  // @@protoc_insertion_point(destructor:abb.robot.StandardizedJoint)
  SharedDtor();
}

void StandardizedJoint::SharedDtor() {
  original_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  standardized_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StandardizedJoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StandardizedJoint::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StandardizedJoint& StandardizedJoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_StandardizedJoint.base);
  return *internal_default_instance();
}


void StandardizedJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.StandardizedJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      original_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      standardized_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&lower_joint_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotating_move_) -
        reinterpret_cast<char*>(&lower_joint_bound_)) + sizeof(rotating_move_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StandardizedJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.StandardizedJoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string original_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_name().data(), static_cast<int>(this->original_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.StandardizedJoint.original_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string standardized_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_standardized_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->standardized_name().data(), static_cast<int>(this->standardized_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.StandardizedJoint.standardized_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rotating_move = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rotating_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotating_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lower_joint_bound = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lower_joint_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_joint_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double upper_joint_bound = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_upper_joint_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_joint_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.StandardizedJoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.StandardizedJoint)
  return false;
#undef DO_
}

void StandardizedJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.StandardizedJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string original_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_name().data(), static_cast<int>(this->original_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.StandardizedJoint.original_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->original_name(), output);
  }

  // optional string standardized_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->standardized_name().data(), static_cast<int>(this->standardized_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.StandardizedJoint.standardized_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->standardized_name(), output);
  }

  // optional bool rotating_move = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rotating_move(), output);
  }

  // optional double lower_joint_bound = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lower_joint_bound(), output);
  }

  // optional double upper_joint_bound = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->upper_joint_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.StandardizedJoint)
}

::google::protobuf::uint8* StandardizedJoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.StandardizedJoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string original_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_name().data(), static_cast<int>(this->original_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.StandardizedJoint.original_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->original_name(), target);
  }

  // optional string standardized_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->standardized_name().data(), static_cast<int>(this->standardized_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.StandardizedJoint.standardized_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->standardized_name(), target);
  }

  // optional bool rotating_move = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rotating_move(), target);
  }

  // optional double lower_joint_bound = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lower_joint_bound(), target);
  }

  // optional double upper_joint_bound = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->upper_joint_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.StandardizedJoint)
  return target;
}

size_t StandardizedJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.StandardizedJoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string original_name = 1;
    if (has_original_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_name());
    }

    // optional string standardized_name = 2;
    if (has_standardized_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->standardized_name());
    }

    // optional double lower_joint_bound = 4;
    if (has_lower_joint_bound()) {
      total_size += 1 + 8;
    }

    // optional double upper_joint_bound = 5;
    if (has_upper_joint_bound()) {
      total_size += 1 + 8;
    }

    // optional bool rotating_move = 3;
    if (has_rotating_move()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StandardizedJoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.StandardizedJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const StandardizedJoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StandardizedJoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.StandardizedJoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.StandardizedJoint)
    MergeFrom(*source);
  }
}

void StandardizedJoint::MergeFrom(const StandardizedJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.StandardizedJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_original_name();
      original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_standardized_name();
      standardized_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.standardized_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      lower_joint_bound_ = from.lower_joint_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      upper_joint_bound_ = from.upper_joint_bound_;
    }
    if (cached_has_bits & 0x00000010u) {
      rotating_move_ = from.rotating_move_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StandardizedJoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.StandardizedJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardizedJoint::CopyFrom(const StandardizedJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.StandardizedJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardizedJoint::IsInitialized() const {
  return true;
}

void StandardizedJoint::Swap(StandardizedJoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StandardizedJoint::InternalSwap(StandardizedJoint* other) {
  using std::swap;
  original_name_.Swap(&other->original_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  standardized_name_.Swap(&other->standardized_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lower_joint_bound_, other->lower_joint_bound_);
  swap(upper_joint_bound_, other->upper_joint_bound_);
  swap(rotating_move_, other->rotating_move_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StandardizedJoint::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Single::InitAsDefaultInstance() {
  ::abb::robot::_Single_default_instance_._instance.get_mutable()->joint_ = const_cast< ::abb::robot::Joint*>(
      ::abb::robot::Joint::internal_default_instance());
  ::abb::robot::_Single_default_instance_._instance.get_mutable()->base_frame_ = const_cast< ::abb::robot::Pose*>(
      ::abb::robot::Pose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Single::kNameFieldNumber;
const int Single::kTypeFieldNumber;
const int Single::kJointFieldNumber;
const int Single::kBaseFrameFieldNumber;
const int Single::kBaseFrameMovedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Single::Single()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Single.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Single)
}
Single::Single(const Single& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  base_frame_moved_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_frame_moved_by()) {
    base_frame_moved_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_frame_moved_by_);
  }
  if (from.has_joint()) {
    joint_ = new ::abb::robot::Joint(*from.joint_);
  } else {
    joint_ = NULL;
  }
  if (from.has_base_frame()) {
    base_frame_ = new ::abb::robot::Pose(*from.base_frame_);
  } else {
    base_frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.Single)
}

void Single::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_frame_moved_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&joint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_frame_) -
      reinterpret_cast<char*>(&joint_)) + sizeof(base_frame_));
}

Single::~Single() {
  // @@protoc_insertion_point(destructor:abb.robot.Single)
  SharedDtor();
}

void Single::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_frame_moved_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete joint_;
  if (this != internal_default_instance()) delete base_frame_;
}

void Single::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Single::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Single& Single::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Single.base);
  return *internal_default_instance();
}


void Single::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Single)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      base_frame_moved_by_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(joint_ != NULL);
      joint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(base_frame_ != NULL);
      base_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Single)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Single.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Single.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Joint joint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Pose base_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base_frame_moved_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_frame_moved_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_frame_moved_by().data(), static_cast<int>(this->base_frame_moved_by().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Single.base_frame_moved_by");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Single)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Single)
  return false;
#undef DO_
}

void Single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Single)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Single.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Single.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional .abb.robot.Joint joint = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_joint(), output);
  }

  // optional .abb.robot.Pose base_frame = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_base_frame(), output);
  }

  // optional string base_frame_moved_by = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_frame_moved_by().data(), static_cast<int>(this->base_frame_moved_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Single.base_frame_moved_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->base_frame_moved_by(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Single)
}

::google::protobuf::uint8* Single::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Single)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Single.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Single.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .abb.robot.Joint joint = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_joint(), deterministic, target);
  }

  // optional .abb.robot.Pose base_frame = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_base_frame(), deterministic, target);
  }

  // optional string base_frame_moved_by = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_frame_moved_by().data(), static_cast<int>(this->base_frame_moved_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Single.base_frame_moved_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->base_frame_moved_by(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Single)
  return target;
}

size_t Single::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Single)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string base_frame_moved_by = 5;
    if (has_base_frame_moved_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_frame_moved_by());
    }

    // optional .abb.robot.Joint joint = 3;
    if (has_joint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joint_);
    }

    // optional .abb.robot.Pose base_frame = 4;
    if (has_base_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *base_frame_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Single::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Single)
  GOOGLE_DCHECK_NE(&from, this);
  const Single* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Single>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Single)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Single)
    MergeFrom(*source);
  }
}

void Single::MergeFrom(const Single& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Single)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_base_frame_moved_by();
      base_frame_moved_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_frame_moved_by_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_joint()->::abb::robot::Joint::MergeFrom(from.joint());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_base_frame()->::abb::robot::Pose::MergeFrom(from.base_frame());
    }
  }
}

void Single::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Single::CopyFrom(const Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Single::IsInitialized() const {
  return true;
}

void Single::Swap(Single* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Single::InternalSwap(Single* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_frame_moved_by_.Swap(&other->base_frame_moved_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(joint_, other->joint_);
  swap(base_frame_, other->base_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Single::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
  ::abb::robot::_Robot_default_instance_._instance.get_mutable()->base_frame_ = const_cast< ::abb::robot::Pose*>(
      ::abb::robot::Pose::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kNameFieldNumber;
const int Robot::kTypeFieldNumber;
const int Robot::kJointsFieldNumber;
const int Robot::kBaseFrameFieldNumber;
const int Robot::kBaseFrameMovedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Robot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  base_frame_moved_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_frame_moved_by()) {
    base_frame_moved_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_frame_moved_by_);
  }
  if (from.has_base_frame()) {
    base_frame_ = new ::abb::robot::Pose(*from.base_frame_);
  } else {
    base_frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.Robot)
}

void Robot::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_frame_moved_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_frame_ = NULL;
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:abb.robot.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_frame_moved_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_frame_;
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_Robot.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      base_frame_moved_by_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(base_frame_ != NULL);
      base_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.Robot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Robot.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Robot.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.Joint joints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Pose base_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base_frame_moved_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_frame_moved_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_frame_moved_by().data(), static_cast<int>(this->base_frame_moved_by().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.Robot.base_frame_moved_by");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Robot.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Robot.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated .abb.robot.Joint joints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->joints(static_cast<int>(i)),
      output);
  }

  // optional .abb.robot.Pose base_frame = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_base_frame(), output);
  }

  // optional string base_frame_moved_by = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_frame_moved_by().data(), static_cast<int>(this->base_frame_moved_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Robot.base_frame_moved_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->base_frame_moved_by(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Robot.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Robot.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated .abb.robot.Joint joints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->joints(static_cast<int>(i)), deterministic, target);
  }

  // optional .abb.robot.Pose base_frame = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_base_frame(), deterministic, target);
  }

  // optional string base_frame_moved_by = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_frame_moved_by().data(), static_cast<int>(this->base_frame_moved_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.Robot.base_frame_moved_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->base_frame_moved_by(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .abb.robot.Joint joints = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->joints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joints(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string base_frame_moved_by = 5;
    if (has_base_frame_moved_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_frame_moved_by());
    }

    // optional .abb.robot.Pose base_frame = 4;
    if (has_base_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *base_frame_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joints_.MergeFrom(from.joints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_base_frame_moved_by();
      base_frame_moved_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_frame_moved_by_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_base_frame()->::abb::robot::Pose::MergeFrom(from.base_frame());
    }
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  CastToBase(&joints_)->InternalSwap(CastToBase(&other->joints_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_frame_moved_by_.Swap(&other->base_frame_moved_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_frame_, other->base_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MechanicalUnit::InitAsDefaultInstance() {
  ::abb::robot::_MechanicalUnit_default_instance_._instance.get_mutable()->robot_ = const_cast< ::abb::robot::Robot*>(
      ::abb::robot::Robot::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MechanicalUnit::kNameFieldNumber;
const int MechanicalUnit::kRobotFieldNumber;
const int MechanicalUnit::kSinglesFieldNumber;
const int MechanicalUnit::kTypeFieldNumber;
const int MechanicalUnit::kTaskNameFieldNumber;
const int MechanicalUnit::kAxesFieldNumber;
const int MechanicalUnit::kAxesTotalFieldNumber;
const int MechanicalUnit::kIsIntegratedUnitFieldNumber;
const int MechanicalUnit::kHasIntegratedUnitFieldNumber;
const int MechanicalUnit::kStatusFieldNumber;
const int MechanicalUnit::kModeFieldNumber;
const int MechanicalUnit::kStandardizedJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MechanicalUnit::MechanicalUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_MechanicalUnit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.MechanicalUnit)
}
MechanicalUnit::MechanicalUnit(const MechanicalUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      singles_(from.singles_),
      standardized_joints_(from.standardized_joints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  task_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_task_name()) {
    task_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_name_);
  }
  is_integrated_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_is_integrated_unit()) {
    is_integrated_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.is_integrated_unit_);
  }
  has_integrated_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_has_integrated_unit()) {
    has_integrated_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.has_integrated_unit_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status()) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_robot()) {
    robot_ = new ::abb::robot::Robot(*from.robot_);
  } else {
    robot_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.MechanicalUnit)
}

void MechanicalUnit::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_integrated_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_integrated_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&robot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&robot_)) + sizeof(mode_));
}

MechanicalUnit::~MechanicalUnit() {
  // @@protoc_insertion_point(destructor:abb.robot.MechanicalUnit)
  SharedDtor();
}

void MechanicalUnit::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_integrated_unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  has_integrated_unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete robot_;
}

void MechanicalUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MechanicalUnit::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MechanicalUnit& MechanicalUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_MechanicalUnit.base);
  return *internal_default_instance();
}


void MechanicalUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.MechanicalUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  singles_.Clear();
  standardized_joints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      task_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      is_integrated_unit_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      has_integrated_unit_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      status_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(robot_ != NULL);
      robot_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axes_) -
        reinterpret_cast<char*>(&type_)) + sizeof(axes_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&axes_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&axes_total_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MechanicalUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.MechanicalUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.MechanicalUnit.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.Robot robot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.Single singles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_singles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::robot::MechanicalUnit_Type_IsValid(value)) {
            set_type(static_cast< ::abb::robot::MechanicalUnit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string task_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_name().data(), static_cast<int>(this->task_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.MechanicalUnit.task_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axes_total = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_axes_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axes_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string is_integrated_unit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_integrated_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->is_integrated_unit().data(), static_cast<int>(this->is_integrated_unit().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.MechanicalUnit.is_integrated_unit");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string has_integrated_unit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_has_integrated_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->has_integrated_unit().data(), static_cast<int>(this->has_integrated_unit().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.MechanicalUnit.has_integrated_unit");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.MechanicalUnit.status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::robot::MechanicalUnit_Mode_IsValid(value)) {
            set_mode(static_cast< ::abb::robot::MechanicalUnit_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_standardized_joints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.MechanicalUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.MechanicalUnit)
  return false;
#undef DO_
}

void MechanicalUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.MechanicalUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .abb.robot.Robot robot = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_robot(), output);
  }

  // repeated .abb.robot.Single singles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->singles(static_cast<int>(i)),
      output);
  }

  // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string task_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_name().data(), static_cast<int>(this->task_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.task_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_name(), output);
  }

  // optional int32 axes = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->axes(), output);
  }

  // optional int32 axes_total = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->axes_total(), output);
  }

  // optional string is_integrated_unit = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->is_integrated_unit().data(), static_cast<int>(this->is_integrated_unit().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.is_integrated_unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->is_integrated_unit(), output);
  }

  // optional string has_integrated_unit = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->has_integrated_unit().data(), static_cast<int>(this->has_integrated_unit().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.has_integrated_unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->has_integrated_unit(), output);
  }

  // optional string status = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->status(), output);
  }

  // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->mode(), output);
  }

  // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->standardized_joints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->standardized_joints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.MechanicalUnit)
}

::google::protobuf::uint8* MechanicalUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.MechanicalUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .abb.robot.Robot robot = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_robot(), deterministic, target);
  }

  // repeated .abb.robot.Single singles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->singles(static_cast<int>(i)), deterministic, target);
  }

  // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string task_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_name().data(), static_cast<int>(this->task_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.task_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->task_name(), target);
  }

  // optional int32 axes = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->axes(), target);
  }

  // optional int32 axes_total = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->axes_total(), target);
  }

  // optional string is_integrated_unit = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->is_integrated_unit().data(), static_cast<int>(this->is_integrated_unit().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.is_integrated_unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->is_integrated_unit(), target);
  }

  // optional string has_integrated_unit = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->has_integrated_unit().data(), static_cast<int>(this->has_integrated_unit().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.has_integrated_unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->has_integrated_unit(), target);
  }

  // optional string status = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnit.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->status(), target);
  }

  // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->mode(), target);
  }

  // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->standardized_joints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->standardized_joints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.MechanicalUnit)
  return target;
}

size_t MechanicalUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.MechanicalUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .abb.robot.Single singles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->singles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->singles(static_cast<int>(i)));
    }
  }

  // repeated .abb.robot.StandardizedJoint standardized_joints = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->standardized_joints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->standardized_joints(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string task_name = 5;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional string is_integrated_unit = 8;
    if (has_is_integrated_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->is_integrated_unit());
    }

    // optional string has_integrated_unit = 9;
    if (has_has_integrated_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->has_integrated_unit());
    }

    // optional string status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional .abb.robot.Robot robot = 2;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .abb.robot.MechanicalUnit.Type type = 4 [default = UNDEFINED];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 axes = 6;
    if (has_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axes());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 axes_total = 7;
    if (has_axes_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axes_total());
    }

    // optional .abb.robot.MechanicalUnit.Mode mode = 11 [default = DEACTIVATED];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.MechanicalUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalUnit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MechanicalUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.MechanicalUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.MechanicalUnit)
    MergeFrom(*source);
  }
}

void MechanicalUnit::MergeFrom(const MechanicalUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.MechanicalUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  singles_.MergeFrom(from.singles_);
  standardized_joints_.MergeFrom(from.standardized_joints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_task_name();
      task_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_is_integrated_unit();
      is_integrated_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.is_integrated_unit_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_has_integrated_unit();
      has_integrated_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.has_integrated_unit_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_robot()->::abb::robot::Robot::MergeFrom(from.robot());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      axes_ = from.axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      axes_total_ = from.axes_total_;
    }
    if (cached_has_bits & 0x00000200u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MechanicalUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.MechanicalUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalUnit::CopyFrom(const MechanicalUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.MechanicalUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalUnit::IsInitialized() const {
  return true;
}

void MechanicalUnit::Swap(MechanicalUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MechanicalUnit::InternalSwap(MechanicalUnit* other) {
  using std::swap;
  CastToBase(&singles_)->InternalSwap(CastToBase(&other->singles_));
  CastToBase(&standardized_joints_)->InternalSwap(CastToBase(&other->standardized_joints_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_name_.Swap(&other->task_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  is_integrated_unit_.Swap(&other->is_integrated_unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  has_integrated_unit_.Swap(&other->has_integrated_unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(robot_, other->robot_);
  swap(type_, other->type_);
  swap(axes_, other->axes_);
  swap(axes_total_, other->axes_total_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MechanicalUnit::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MechanicalUnitGroup::InitAsDefaultInstance() {
  ::abb::robot::_MechanicalUnitGroup_default_instance_._instance.get_mutable()->robot_ = const_cast< ::abb::robot::MechanicalUnit*>(
      ::abb::robot::MechanicalUnit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MechanicalUnitGroup::kNameFieldNumber;
const int MechanicalUnitGroup::kRobotFieldNumber;
const int MechanicalUnitGroup::kMechanicalUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MechanicalUnitGroup::MechanicalUnitGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_MechanicalUnitGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.MechanicalUnitGroup)
}
MechanicalUnitGroup::MechanicalUnitGroup(const MechanicalUnitGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mechanical_units_(from.mechanical_units_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_robot()) {
    robot_ = new ::abb::robot::MechanicalUnit(*from.robot_);
  } else {
    robot_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.MechanicalUnitGroup)
}

void MechanicalUnitGroup::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_ = NULL;
}

MechanicalUnitGroup::~MechanicalUnitGroup() {
  // @@protoc_insertion_point(destructor:abb.robot.MechanicalUnitGroup)
  SharedDtor();
}

void MechanicalUnitGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete robot_;
}

void MechanicalUnitGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MechanicalUnitGroup::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MechanicalUnitGroup& MechanicalUnitGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_MechanicalUnitGroup.base);
  return *internal_default_instance();
}


void MechanicalUnitGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.MechanicalUnitGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mechanical_units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(robot_ != NULL);
      robot_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MechanicalUnitGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.MechanicalUnitGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.MechanicalUnitGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.MechanicalUnit robot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mechanical_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.MechanicalUnitGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.MechanicalUnitGroup)
  return false;
#undef DO_
}

void MechanicalUnitGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.MechanicalUnitGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnitGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .abb.robot.MechanicalUnit robot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_robot(), output);
  }

  // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mechanical_units_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->mechanical_units(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.MechanicalUnitGroup)
}

::google::protobuf::uint8* MechanicalUnitGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.MechanicalUnitGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.MechanicalUnitGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .abb.robot.MechanicalUnit robot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_robot(), deterministic, target);
  }

  // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mechanical_units_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->mechanical_units(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.MechanicalUnitGroup)
  return target;
}

size_t MechanicalUnitGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.MechanicalUnitGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .abb.robot.MechanicalUnit mechanical_units = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mechanical_units_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mechanical_units(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .abb.robot.MechanicalUnit robot = 2;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *robot_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalUnitGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.MechanicalUnitGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalUnitGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MechanicalUnitGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.MechanicalUnitGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.MechanicalUnitGroup)
    MergeFrom(*source);
  }
}

void MechanicalUnitGroup::MergeFrom(const MechanicalUnitGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.MechanicalUnitGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mechanical_units_.MergeFrom(from.mechanical_units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_robot()->::abb::robot::MechanicalUnit::MergeFrom(from.robot());
    }
  }
}

void MechanicalUnitGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.MechanicalUnitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalUnitGroup::CopyFrom(const MechanicalUnitGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.MechanicalUnitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalUnitGroup::IsInitialized() const {
  return true;
}

void MechanicalUnitGroup::Swap(MechanicalUnitGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MechanicalUnitGroup::InternalSwap(MechanicalUnitGroup* other) {
  using std::swap;
  CastToBase(&mechanical_units_)->InternalSwap(CastToBase(&other->mechanical_units_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(robot_, other->robot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MechanicalUnitGroup::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RAPIDModule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RAPIDModule::kNameFieldNumber;
const int RAPIDModule::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RAPIDModule::RAPIDModule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RAPIDModule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.RAPIDModule)
}
RAPIDModule::RAPIDModule(const RAPIDModule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:abb.robot.RAPIDModule)
}

void RAPIDModule::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RAPIDModule::~RAPIDModule() {
  // @@protoc_insertion_point(destructor:abb.robot.RAPIDModule)
  SharedDtor();
}

void RAPIDModule::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RAPIDModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RAPIDModule::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RAPIDModule& RAPIDModule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RAPIDModule.base);
  return *internal_default_instance();
}


void RAPIDModule::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RAPIDModule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RAPIDModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.RAPIDModule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.RAPIDModule.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.RAPIDModule.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.RAPIDModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.RAPIDModule)
  return false;
#undef DO_
}

void RAPIDModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.RAPIDModule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RAPIDModule.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RAPIDModule.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.RAPIDModule)
}

::google::protobuf::uint8* RAPIDModule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RAPIDModule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RAPIDModule.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RAPIDModule.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RAPIDModule)
  return target;
}

size_t RAPIDModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RAPIDModule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RAPIDModule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.RAPIDModule)
  GOOGLE_DCHECK_NE(&from, this);
  const RAPIDModule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RAPIDModule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.RAPIDModule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.RAPIDModule)
    MergeFrom(*source);
  }
}

void RAPIDModule::MergeFrom(const RAPIDModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RAPIDModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void RAPIDModule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.RAPIDModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RAPIDModule::CopyFrom(const RAPIDModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RAPIDModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RAPIDModule::IsInitialized() const {
  return true;
}

void RAPIDModule::Swap(RAPIDModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RAPIDModule::InternalSwap(RAPIDModule* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RAPIDModule::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RAPIDTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RAPIDTask::kNameFieldNumber;
const int RAPIDTask::kIsMotionTaskFieldNumber;
const int RAPIDTask::kIsActiveFieldNumber;
const int RAPIDTask::kExecutionStateFieldNumber;
const int RAPIDTask::kModulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RAPIDTask::RAPIDTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RAPIDTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.robot.RAPIDTask)
}
RAPIDTask::RAPIDTask(const RAPIDTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      modules_(from.modules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&is_motion_task_, &from.is_motion_task_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_state_) -
    reinterpret_cast<char*>(&is_motion_task_)) + sizeof(execution_state_));
  // @@protoc_insertion_point(copy_constructor:abb.robot.RAPIDTask)
}

void RAPIDTask::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_motion_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&is_motion_task_)) + sizeof(is_active_));
  execution_state_ = 1;
}

RAPIDTask::~RAPIDTask() {
  // @@protoc_insertion_point(destructor:abb.robot.RAPIDTask)
  SharedDtor();
}

void RAPIDTask::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RAPIDTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RAPIDTask::descriptor() {
  ::protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RAPIDTask& RAPIDTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fcontroller_5fdescription_2eproto::scc_info_RAPIDTask.base);
  return *internal_default_instance();
}


void RAPIDTask::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.robot.RAPIDTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  ::memset(&is_motion_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&is_motion_task_)) + sizeof(is_active_));
  execution_state_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RAPIDTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.robot.RAPIDTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abb.robot.RAPIDTask.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_motion_task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_motion_task();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motion_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::robot::RAPIDTask_ExecutionState_IsValid(value)) {
            set_execution_state(static_cast< ::abb::robot::RAPIDTask_ExecutionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abb.robot.RAPIDModule modules = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_modules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.robot.RAPIDTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.robot.RAPIDTask)
  return false;
#undef DO_
}

void RAPIDTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.robot.RAPIDTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RAPIDTask.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool is_motion_task = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_motion_task(), output);
  }

  // optional bool is_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->execution_state(), output);
  }

  // repeated .abb.robot.RAPIDModule modules = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->modules(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.robot.RAPIDTask)
}

::google::protobuf::uint8* RAPIDTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.robot.RAPIDTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abb.robot.RAPIDTask.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool is_motion_task = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_motion_task(), target);
  }

  // optional bool is_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_active(), target);
  }

  // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->execution_state(), target);
  }

  // repeated .abb.robot.RAPIDModule modules = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->modules(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.robot.RAPIDTask)
  return target;
}

size_t RAPIDTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.robot.RAPIDTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .abb.robot.RAPIDModule modules = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->modules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->modules(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool is_motion_task = 2;
    if (has_is_motion_task()) {
      total_size += 1 + 1;
    }

    // optional bool is_active = 3;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // optional .abb.robot.RAPIDTask.ExecutionState execution_state = 4 [default = UNKNOWN];
    if (has_execution_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->execution_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RAPIDTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.robot.RAPIDTask)
  GOOGLE_DCHECK_NE(&from, this);
  const RAPIDTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RAPIDTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.robot.RAPIDTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.robot.RAPIDTask)
    MergeFrom(*source);
  }
}

void RAPIDTask::MergeFrom(const RAPIDTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.robot.RAPIDTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_motion_task_ = from.is_motion_task_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_active_ = from.is_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      execution_state_ = from.execution_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RAPIDTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.robot.RAPIDTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RAPIDTask::CopyFrom(const RAPIDTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.robot.RAPIDTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RAPIDTask::IsInitialized() const {
  return true;
}

void RAPIDTask::Swap(RAPIDTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RAPIDTask::InternalSwap(RAPIDTask* other) {
  using std::swap;
  CastToBase(&modules_)->InternalSwap(CastToBase(&other->modules_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_motion_task_, other->is_motion_task_);
  swap(is_active_, other->is_active_);
  swap(execution_state_, other->execution_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RAPIDTask::GetMetadata() const {
  protobuf_robot_5fcontroller_5fdescription_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fcontroller_5fdescription_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot
}  // namespace abb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Header* Arena::CreateMaybeMessage< ::abb::robot::Header >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::RobotControllerDescription* Arena::CreateMaybeMessage< ::abb::robot::RobotControllerDescription >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::RobotControllerDescription >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::RobotWareVersion* Arena::CreateMaybeMessage< ::abb::robot::RobotWareVersion >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::RobotWareVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Cartesian* Arena::CreateMaybeMessage< ::abb::robot::Cartesian >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Cartesian >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Quaternion* Arena::CreateMaybeMessage< ::abb::robot::Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Quaternion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Pose* Arena::CreateMaybeMessage< ::abb::robot::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Pose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::RobotIndicators* Arena::CreateMaybeMessage< ::abb::robot::RobotIndicators >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::RobotIndicators >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::OptionIndicators* Arena::CreateMaybeMessage< ::abb::robot::OptionIndicators >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::OptionIndicators >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::AddInIndicators* Arena::CreateMaybeMessage< ::abb::robot::AddInIndicators >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::AddInIndicators >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::SystemIndicators* Arena::CreateMaybeMessage< ::abb::robot::SystemIndicators >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::SystemIndicators >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Transmission* Arena::CreateMaybeMessage< ::abb::robot::Transmission >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Transmission >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Arm* Arena::CreateMaybeMessage< ::abb::robot::Arm >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Arm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Joint* Arena::CreateMaybeMessage< ::abb::robot::Joint >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Joint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::StandardizedJoint* Arena::CreateMaybeMessage< ::abb::robot::StandardizedJoint >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::StandardizedJoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Single* Arena::CreateMaybeMessage< ::abb::robot::Single >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Single >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::Robot* Arena::CreateMaybeMessage< ::abb::robot::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::Robot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::MechanicalUnit* Arena::CreateMaybeMessage< ::abb::robot::MechanicalUnit >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::MechanicalUnit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::MechanicalUnitGroup* Arena::CreateMaybeMessage< ::abb::robot::MechanicalUnitGroup >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::MechanicalUnitGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::RAPIDModule* Arena::CreateMaybeMessage< ::abb::robot::RAPIDModule >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::RAPIDModule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::abb::robot::RAPIDTask* Arena::CreateMaybeMessage< ::abb::robot::RAPIDTask >(Arena* arena) {
  return Arena::CreateInternal< ::abb::robot::RAPIDTask >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
